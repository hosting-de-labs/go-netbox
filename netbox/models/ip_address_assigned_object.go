// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2018 The go-netbox Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IPAddressAssignedObject AssignedObject
//
// swagger:model IPAddressAssignedObject
type IPAddressAssignedObject struct {

	// Cable
	Cable *int64 `json:"cable,omitempty"`

	// connection status
	ConnectionStatus *IPAddressAssignedObjectConnectionStatus `json:"connection_status,omitempty"`

	// device
	Device *IPAddressAssignedObjectDevice `json:"device,omitempty"`

	// ID
	// Read Only: true
	ID int64 `json:"id,omitempty"`

	// Name
	// Max Length: 50
	// Min Length: 1
	Name string `json:"name,omitempty"`

	// Url
	// Read Only: true
	// Format: uri
	URL strfmt.URI `json:"url,omitempty"`

	// virtual machine
	VirtualMachine *IPAddressAssignedObjectVirtualMachine `json:"virtual_machine,omitempty"`
}

// Validate validates this IP address assigned object
func (m *IPAddressAssignedObject) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConnectionStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDevice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVirtualMachine(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IPAddressAssignedObject) validateConnectionStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.ConnectionStatus) { // not required
		return nil
	}

	if m.ConnectionStatus != nil {
		if err := m.ConnectionStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("connection_status")
			}
			return err
		}
	}

	return nil
}

func (m *IPAddressAssignedObject) validateDevice(formats strfmt.Registry) error {

	if swag.IsZero(m.Device) { // not required
		return nil
	}

	if m.Device != nil {
		if err := m.Device.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("device")
			}
			return err
		}
	}

	return nil
}

func (m *IPAddressAssignedObject) validateName(formats strfmt.Registry) error {

	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := validate.MinLength("name", "body", string(m.Name), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", string(m.Name), 50); err != nil {
		return err
	}

	return nil
}

func (m *IPAddressAssignedObject) validateURL(formats strfmt.Registry) error {

	if swag.IsZero(m.URL) { // not required
		return nil
	}

	if err := validate.FormatOf("url", "body", "uri", m.URL.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *IPAddressAssignedObject) validateVirtualMachine(formats strfmt.Registry) error {

	if swag.IsZero(m.VirtualMachine) { // not required
		return nil
	}

	if m.VirtualMachine != nil {
		if err := m.VirtualMachine.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("virtual_machine")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IPAddressAssignedObject) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IPAddressAssignedObject) UnmarshalBinary(b []byte) error {
	var res IPAddressAssignedObject
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// IPAddressAssignedObjectConnectionStatus Connection status
//
// swagger:model IPAddressAssignedObjectConnectionStatus
type IPAddressAssignedObjectConnectionStatus struct {

	// label
	// Required: true
	// Enum: [Not Connected Connected]
	Label *string `json:"label"`

	// value
	// Required: true
	// Enum: [false true]
	Value *bool `json:"value"`
}

// Validate validates this IP address assigned object connection status
func (m *IPAddressAssignedObjectConnectionStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLabel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var ipAddressAssignedObjectConnectionStatusTypeLabelPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Not Connected","Connected"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		ipAddressAssignedObjectConnectionStatusTypeLabelPropEnum = append(ipAddressAssignedObjectConnectionStatusTypeLabelPropEnum, v)
	}
}

const (

	// IPAddressAssignedObjectConnectionStatusLabelNotConnected captures enum value "Not Connected"
	IPAddressAssignedObjectConnectionStatusLabelNotConnected string = "Not Connected"

	// IPAddressAssignedObjectConnectionStatusLabelConnected captures enum value "Connected"
	IPAddressAssignedObjectConnectionStatusLabelConnected string = "Connected"
)

// prop value enum
func (m *IPAddressAssignedObjectConnectionStatus) validateLabelEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, ipAddressAssignedObjectConnectionStatusTypeLabelPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *IPAddressAssignedObjectConnectionStatus) validateLabel(formats strfmt.Registry) error {

	if err := validate.Required("connection_status"+"."+"label", "body", m.Label); err != nil {
		return err
	}

	// value enum
	if err := m.validateLabelEnum("connection_status"+"."+"label", "body", *m.Label); err != nil {
		return err
	}

	return nil
}

var ipAddressAssignedObjectConnectionStatusTypeValuePropEnum []interface{}

func init() {
	var res []bool
	if err := json.Unmarshal([]byte(`[false,true]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		ipAddressAssignedObjectConnectionStatusTypeValuePropEnum = append(ipAddressAssignedObjectConnectionStatusTypeValuePropEnum, v)
	}
}

// prop value enum
func (m *IPAddressAssignedObjectConnectionStatus) validateValueEnum(path, location string, value bool) error {
	if err := validate.EnumCase(path, location, value, ipAddressAssignedObjectConnectionStatusTypeValuePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *IPAddressAssignedObjectConnectionStatus) validateValue(formats strfmt.Registry) error {

	if err := validate.Required("connection_status"+"."+"value", "body", m.Value); err != nil {
		return err
	}

	// value enum
	if err := m.validateValueEnum("connection_status"+"."+"value", "body", *m.Value); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IPAddressAssignedObjectConnectionStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IPAddressAssignedObjectConnectionStatus) UnmarshalBinary(b []byte) error {
	var res IPAddressAssignedObjectConnectionStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// IPAddressAssignedObjectDevice Device
//
// swagger:model IPAddressAssignedObjectDevice
type IPAddressAssignedObjectDevice struct {

	// ID
	// Read Only: true
	ID int64 `json:"id,omitempty"`

	// Name
	// Max Length: 50
	// Min Length: 1
	Name string `json:"name,omitempty"`

	// Url
	// Read Only: true
	// Format: uri
	URL strfmt.URI `json:"url,omitempty"`
}

// Validate validates this IP address assigned object device
func (m *IPAddressAssignedObjectDevice) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateURL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IPAddressAssignedObjectDevice) validateName(formats strfmt.Registry) error {

	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := validate.MinLength("device"+"."+"name", "body", string(m.Name), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("device"+"."+"name", "body", string(m.Name), 50); err != nil {
		return err
	}

	return nil
}

func (m *IPAddressAssignedObjectDevice) validateURL(formats strfmt.Registry) error {

	if swag.IsZero(m.URL) { // not required
		return nil
	}

	if err := validate.FormatOf("device"+"."+"url", "body", "uri", m.URL.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IPAddressAssignedObjectDevice) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IPAddressAssignedObjectDevice) UnmarshalBinary(b []byte) error {
	var res IPAddressAssignedObjectDevice
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// IPAddressAssignedObjectVirtualMachine Virtual machine
//
// swagger:model IPAddressAssignedObjectVirtualMachine
type IPAddressAssignedObjectVirtualMachine struct {

	// Display name
	// Max Length: 50
	// Min Length: 1
	DisplayName string `json:"display_name,omitempty"`

	// ID
	// Read Only: true
	ID int64 `json:"id,omitempty"`

	// Name
	// Max Length: 50
	// Min Length: 1
	Name string `json:"name,omitempty"`

	// Url
	// Read Only: true
	// Format: uri
	URL strfmt.URI `json:"url,omitempty"`
}

// Validate validates this IP address assigned object virtual machine
func (m *IPAddressAssignedObjectVirtualMachine) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDisplayName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateURL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IPAddressAssignedObjectVirtualMachine) validateDisplayName(formats strfmt.Registry) error {

	if swag.IsZero(m.DisplayName) { // not required
		return nil
	}

	if err := validate.MinLength("virtual_machine"+"."+"display_name", "body", string(m.DisplayName), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("virtual_machine"+"."+"display_name", "body", string(m.DisplayName), 50); err != nil {
		return err
	}

	return nil
}

func (m *IPAddressAssignedObjectVirtualMachine) validateName(formats strfmt.Registry) error {

	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := validate.MinLength("virtual_machine"+"."+"name", "body", string(m.Name), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("virtual_machine"+"."+"name", "body", string(m.Name), 50); err != nil {
		return err
	}

	return nil
}

func (m *IPAddressAssignedObjectVirtualMachine) validateURL(formats strfmt.Registry) error {

	if swag.IsZero(m.URL) { // not required
		return nil
	}

	if err := validate.FormatOf("virtual_machine"+"."+"url", "body", "uri", m.URL.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IPAddressAssignedObjectVirtualMachine) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IPAddressAssignedObjectVirtualMachine) UnmarshalBinary(b []byte) error {
	var res IPAddressAssignedObjectVirtualMachine
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
